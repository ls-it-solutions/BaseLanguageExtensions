package TailRecursion.sandbox.test;

/*Generated by MPS */

import java.math.BigInteger;

public class TestCalculator {
  public TestCalculator() {
  }

  public int sum(final int acc, final int n) {
    int localParam_0 = acc;
    int localParam_1 = n;
    while (true) {
      if (localParam_1 == 0) {
        return localParam_0;
      }
      localParam_0 = localParam_0 + localParam_1;
      localParam_1 = localParam_1 - 1;
    }
  }

  public long factorial(final long acc, final int n) {
    long localParam_2 = acc;
    int localParam_3 = n;
    while (true) {
      if (localParam_3 == 1) {
        return localParam_2;
      }
      localParam_2 = localParam_2 * localParam_3;
      localParam_3 = localParam_3 - 1;
    }
  }

  public static int sumS(final int acc, final int n) {
    int localParam_4 = acc;
    int localParam_5 = n;
    while (true) {
      if (localParam_5 == 0) {
        return localParam_4;
      } else {
        localParam_4 = localParam_4 + localParam_5;
        localParam_5 = localParam_5 - 1;
      }
    }
  }

  public static BigInteger factorial(int n) {
    return fact(BigInteger.ONE, BigInteger.valueOf(n));
  }

  private static BigInteger fact(BigInteger acc, BigInteger n) {
    BigInteger localParam_6 = acc;
    BigInteger localParam_7 = n;
    while (true) {
      if (localParam_7.compareTo(BigInteger.ONE) <= 0) {
        return localParam_6;
      }
      localParam_6 = localParam_6.multiply(localParam_7);
      localParam_7 = localParam_7.subtract(BigInteger.ONE);
    }
  }
}
